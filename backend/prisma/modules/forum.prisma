model ForumComment {
  id        String   @id @default(uuid())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post ForumPost @relation(fields: [postId], references: [id])
  user   User @relation("UserComments", fields: [userId], references: [id])

}


model ForumThread {
  id              Int         @id @default(autoincrement())
  course          Course      @relation(fields: [courseId], references: [id])
  courseId        Int
  author          User       @relation("ForumThreadAuthor", fields: [authorId], references: [id])
  authorId        Int
  title           String
  content         String
  acceptedAnswerId Int?
  tags            String[]
  viewsCount      Int         @default(0)
  upvotes         Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  posts           ForumPost[]
  organizationId  Int
  organization    Organization @relation(fields: [organizationId], references: [id])

  userId Int
  user   User @relation("UserThreads", fields: [userId], references: [id])

}

model ForumPost {
  id          Int       @id @default(autoincrement())
  title       String
  thread      ForumThread @relation(fields: [threadId], references: [id])
  threadId    Int

  // Relation #1 â†’ Author of the post
  author      User      @relation("ForumPostAuthor", fields: [authorId], references: [id])
  authorId    Int

  content     String
  upvotes     Int        @default(0)
  createdAt   DateTime   @default(now())

  // Replies (self-relation)
  parentPost    ForumPost? @relation("CommentReplies", fields: [parentPostId], references: [id])
  parentPostId  Int?
  replies       ForumPost[] @relation("CommentReplies")

  // Relation #2 â†’ General user (e.g., participant)
  user          User @relation("ForumPostUser", fields: [userId], references: [id])
  userId        Int

  // Org scoping
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  comments       ForumComment[]   // ðŸ‘ˆ opposite of ForumComment.post
}
